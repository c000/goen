// Code generated by "go run genlist.go -o utils_gen.go"; DO NOT EDIT THIS FILE.

package goen

import (
	"container/list"

	"gopkg.in/Masterminds/squirrel.v1"
)

// PatchList is typed version of list.List
type PatchList list.List

func wrapPatchElementOrNil(e *list.Element) *PatchElement {
	if e == nil {
		return nil
	}
	return &PatchElement{e}
}

// Back is typed version of (*list.List).Back
func (l *PatchList) Back() *PatchElement {
	ret0 := (*list.List)(l).Back()
	return wrapPatchElementOrNil(ret0)
}

// Front is typed version of (*list.List).Front
func (l *PatchList) Front() *PatchElement {
	ret0 := (*list.List)(l).Front()
	return wrapPatchElementOrNil(ret0)
}

// Init is typed version of (*list.List).Init
func (l *PatchList) Init() *PatchList {
	ret0 := (*list.List)(l).Init()
	return (*PatchList)(ret0)
}

// InsertAfter is typed version of (*list.List).InsertAfter
func (l *PatchList) InsertAfter(v *Patch, mark *PatchElement) *PatchElement {
	ret0 := (*list.List)(l).InsertAfter(v, mark.el)
	return wrapPatchElementOrNil(ret0)
}

// InsertBefore is typed version of (*list.List).InsertBefore
func (l *PatchList) InsertBefore(v *Patch, mark *PatchElement) *PatchElement {
	ret0 := (*list.List)(l).InsertBefore(v, mark.el)
	return wrapPatchElementOrNil(ret0)
}

// Len is typed version of (*list.List).Len
func (l *PatchList) Len() int {
	ret0 := (*list.List)(l).Len()
	return (int)(ret0)
}

// MoveAfter is typed version of (*list.List).MoveAfter
func (l *PatchList) MoveAfter(e *PatchElement, mark *PatchElement) {
	(*list.List)(l).MoveAfter(e.el, mark.el)
}

// MoveBefore is typed version of (*list.List).MoveBefore
func (l *PatchList) MoveBefore(e *PatchElement, mark *PatchElement) {
	(*list.List)(l).MoveBefore(e.el, mark.el)
}

// MoveToBack is typed version of (*list.List).MoveToBack
func (l *PatchList) MoveToBack(e *PatchElement) {
	(*list.List)(l).MoveToBack(e.el)
}

// MoveToFront is typed version of (*list.List).MoveToFront
func (l *PatchList) MoveToFront(e *PatchElement) {
	(*list.List)(l).MoveToFront(e.el)
}

// PushBack is typed version of (*list.List).PushBack
func (l *PatchList) PushBack(v *Patch) *PatchElement {
	ret0 := (*list.List)(l).PushBack(v)
	return wrapPatchElementOrNil(ret0)
}

// PushBackList is typed version of (*list.List).PushBackList
func (l *PatchList) PushBackList(other *PatchList) {
	(*list.List)(l).PushBackList((*list.List)(other))
}

// PushFront is typed version of (*list.List).PushFront
func (l *PatchList) PushFront(v *Patch) *PatchElement {
	ret0 := (*list.List)(l).PushFront(v)
	return wrapPatchElementOrNil(ret0)
}

// PushFrontList is typed version of (*list.List).PushFrontList
func (l *PatchList) PushFrontList(other *PatchList) {
	(*list.List)(l).PushFrontList((*list.List)(other))
}

// Remove is typed version of (*list.List).Remove
func (l *PatchList) Remove(e *PatchElement) *Patch {
	ret0 := (*list.List)(l).Remove(e.el)
	return ret0.(*Patch)
}

// PatchElement is typed version of list.Element
type PatchElement struct {
	el *list.Element
}

// Next returns the next list element or nil.
func (e *PatchElement) Next() *PatchElement {
	return wrapPatchElementOrNil(e.el.Next())
}

// Prev returns the previous list element or nil.
func (e *PatchElement) Prev() *PatchElement {
	return wrapPatchElementOrNil(e.el.Prev())
}

// GetValue gets the value stored with this element.
func (e *PatchElement) GetValue() *Patch {
	return e.el.Value.(*Patch)
}

// SetValue sets value with this element.
func (e *PatchElement) SetValue(v *Patch) {
	e.el.Value = v
}

// SqlizerList is typed version of list.List
type SqlizerList list.List

func wrapSqlizerElementOrNil(e *list.Element) *SqlizerElement {
	if e == nil {
		return nil
	}
	return &SqlizerElement{e}
}

// Back is typed version of (*list.List).Back
func (l *SqlizerList) Back() *SqlizerElement {
	ret0 := (*list.List)(l).Back()
	return wrapSqlizerElementOrNil(ret0)
}

// Front is typed version of (*list.List).Front
func (l *SqlizerList) Front() *SqlizerElement {
	ret0 := (*list.List)(l).Front()
	return wrapSqlizerElementOrNil(ret0)
}

// Init is typed version of (*list.List).Init
func (l *SqlizerList) Init() *SqlizerList {
	ret0 := (*list.List)(l).Init()
	return (*SqlizerList)(ret0)
}

// InsertAfter is typed version of (*list.List).InsertAfter
func (l *SqlizerList) InsertAfter(v squirrel.Sqlizer, mark *SqlizerElement) *SqlizerElement {
	ret0 := (*list.List)(l).InsertAfter(v, mark.el)
	return wrapSqlizerElementOrNil(ret0)
}

// InsertBefore is typed version of (*list.List).InsertBefore
func (l *SqlizerList) InsertBefore(v squirrel.Sqlizer, mark *SqlizerElement) *SqlizerElement {
	ret0 := (*list.List)(l).InsertBefore(v, mark.el)
	return wrapSqlizerElementOrNil(ret0)
}

// Len is typed version of (*list.List).Len
func (l *SqlizerList) Len() int {
	ret0 := (*list.List)(l).Len()
	return (int)(ret0)
}

// MoveAfter is typed version of (*list.List).MoveAfter
func (l *SqlizerList) MoveAfter(e *SqlizerElement, mark *SqlizerElement) {
	(*list.List)(l).MoveAfter(e.el, mark.el)
}

// MoveBefore is typed version of (*list.List).MoveBefore
func (l *SqlizerList) MoveBefore(e *SqlizerElement, mark *SqlizerElement) {
	(*list.List)(l).MoveBefore(e.el, mark.el)
}

// MoveToBack is typed version of (*list.List).MoveToBack
func (l *SqlizerList) MoveToBack(e *SqlizerElement) {
	(*list.List)(l).MoveToBack(e.el)
}

// MoveToFront is typed version of (*list.List).MoveToFront
func (l *SqlizerList) MoveToFront(e *SqlizerElement) {
	(*list.List)(l).MoveToFront(e.el)
}

// PushBack is typed version of (*list.List).PushBack
func (l *SqlizerList) PushBack(v squirrel.Sqlizer) *SqlizerElement {
	ret0 := (*list.List)(l).PushBack(v)
	return wrapSqlizerElementOrNil(ret0)
}

// PushBackList is typed version of (*list.List).PushBackList
func (l *SqlizerList) PushBackList(other *SqlizerList) {
	(*list.List)(l).PushBackList((*list.List)(other))
}

// PushFront is typed version of (*list.List).PushFront
func (l *SqlizerList) PushFront(v squirrel.Sqlizer) *SqlizerElement {
	ret0 := (*list.List)(l).PushFront(v)
	return wrapSqlizerElementOrNil(ret0)
}

// PushFrontList is typed version of (*list.List).PushFrontList
func (l *SqlizerList) PushFrontList(other *SqlizerList) {
	(*list.List)(l).PushFrontList((*list.List)(other))
}

// Remove is typed version of (*list.List).Remove
func (l *SqlizerList) Remove(e *SqlizerElement) squirrel.Sqlizer {
	ret0 := (*list.List)(l).Remove(e.el)
	return ret0.(squirrel.Sqlizer)
}

// SqlizerElement is typed version of list.Element
type SqlizerElement struct {
	el *list.Element
}

// Next returns the next list element or nil.
func (e *SqlizerElement) Next() *SqlizerElement {
	return wrapSqlizerElementOrNil(e.el.Next())
}

// Prev returns the previous list element or nil.
func (e *SqlizerElement) Prev() *SqlizerElement {
	return wrapSqlizerElementOrNil(e.el.Prev())
}

// GetValue gets the value stored with this element.
func (e *SqlizerElement) GetValue() squirrel.Sqlizer {
	return e.el.Value.(squirrel.Sqlizer)
}

// SetValue sets value with this element.
func (e *SqlizerElement) SetValue(v squirrel.Sqlizer) {
	e.el.Value = v
}

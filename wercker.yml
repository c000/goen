box: golang

services:
  - id: postgres:9.6-alpine
    env:
      POSTGRES_DB: testing
      POSTGRES_USER: testing
      POSTGRES_PASSWORD: testing

build:
  steps:
    - setup-go-workspace

    - script:
        name: go get
        code: |
          go get -v ./...

    - script:
        name: go build
        code: |
          go build ./...

    - script:
        name: go get for go generate
        code: |
          go get -v github.com/satori/go.uuid
          go get -v github.com/mjibson/esc

    - script:
        name: go generate
        code: |
          go generate ./...

    - script:
        name: go get for go test
        code: |
          go get -v github.com/davecgh/go-spew/spew
          go get -v github.com/mattn/go-sqlite3
          go get -v github.com/lib/pq
          go get -v github.com/stretchr/testify/...
          # for coverage
          go get -v github.com/mattn/goveralls

    - script:
        name: go test for sqlite3
        code: |
          go test -v ./...

    - script:
        name: go test for postgres
        code: |
          GOEN_TEST_CONNSTR="dbname=testing user=testing password=testing host=${POSTGRES_PORT_5432_TCP_ADDR} port=${POSTGRES_PORT_5432_TCP_PORT} sslmode=disable" \
            go test -tags postgres -v ./...

    - script:
        name: coverage
        code: |
          tags=(sqlite3 postgres)
          coverprofile=''
          for pkg in $(go list ./...); do
              for tag in ${tags[@]}; do
                  covfile="$(echo $pkg | sed -e 's/github.com\/kamichidu\///' | sed -e 's/\//_/g')_${tag}.cov"
                  go test -cover -covermode count -coverprofile "$covfile" "$pkg"
                  if [[ -z "$coverprofile" ]]; then
                      coverprofile="${covfile}"
                  else
                      coverprofile="${coverprofile},${covfile}"
                  fi
              done
          done
          # hotfix to tell current branch to goveralls
          GIT_BRANCH="${WERCKER_GIT_BRANCH}" \
            goveralls -service wercker -coverprofile "$coverprofile" -repotoken "$COVERALLS_TOKEN"

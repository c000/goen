// Code generated by "esc -o bindata.go -pkg generator -private templates/"; DO NOT EDIT.

package generator

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/templates/context.tgo": {
		local:   "templates/context.tgo",
		size:    532,
		modtime: 1529737446,
		compressed: `
H4sIAAAAAAAC/5yQwW7CMBBE7/mKEaIViWg+IBKXNL1yKT8Q20sUKV2ovRFFUf692gCmRGoP9ckezz7t
jJyPhKp8PbDQlyCI761gSAAgaw7EefxMJnEY4GtuCEupTUcoNljmO70GjOPNsnQmkOwUXmxw9C3LHoun
UJXvJIvrbP7G0sr559hMR/bIujuJnb7GJNn3bLGlU9xz5dq6Iyvb+oM0UMvNGs4gC59dXpUpsnveS1Bn
rK45xf2NpIh0cnuS3jOeo+0C0ROlQpnrqP9V2ss11H+am8/O6ivAdJo3uHLGpg+raZc3klb6HQAA//9D
kKRFFAIAAA==
`,
	},

	"/templates/root.tgo": {
		local:   "templates/root.tgo",
		size:    510,
		modtime: 1529737446,
		compressed: `
H4sIAAAAAAAC/4SPzY6bMBSF936KI5TFzKL2fqpZNamK1PxIoQ9gzA22AjayL2kjxLtXhqQ/q9ldzv24
57NS+BIaQkueomZqUN9hmYf0plTr2I61NKFXV907Y10zqjaQ/4ztEYdjhd22rFB9K8/4Wn7fSaEUfiRC
uICtS0hhjIZgcoNLaMONol87NPZlhc4Z8onAVjOM9qgJlzD6Bs7nY2wJF9cRumAWu+A/tkOkISTHId6l
EIM2V90SpgkbeVo/DronzLMQrh9CZLwIAJmI2reEzSN+e8dGlsuc8Gmen9RjLx9nUPyTnTRbzHPxZMk3
y6+vQtx0RE+sz8ZSr/EOTz9fsrDc/0lfhfirwbruaLWo8piy8zSBqR86zYRiISS3oXjSK5Fb8/v+g03w
TL94xWXe/w4AAP//BUC9z/4BAAA=
`,
	},

	"/templates/table.tgo": {
		local:   "templates/table.tgo",
		size:    11327,
		modtime: 1530012173,
		compressed: `
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
J9NfvaRzCu60e/q2Htn/CwAA//8TbnFJPywAAA==
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/templates": {
		isDir: true,
		local: "templates",
	},
}

// Code generated by "esc -o bindata.go -pkg generator -private templates/"; DO NOT EDIT.

package generator

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/templates/context.tgo": {
		name:    "context.tgo",
		local:   "templates/context.tgo",
		size:    856,
		modtime: 1568783834,
		compressed: `
H4sIAAAAAAAC/8ySQW6zMBSE95xiFOX/BSjlAEjZULrNpvQA2H5BSNSk+KEQIe5e2QRIUBupXZUVfp43
mvlkvpwIafJca6aOYbhpJaP3ACAsatLRfOm5Yd+jyXVB2HIuKkK8xzbK7K/BMEySrRKGOLPm8R6nptR8
xOafSZNX4s11N3rRXPLldm01R3jvtShJK3saPO/YaokDneecvirziiQf8neyhUpd7KAEQvNRRWkSIFz6
jkWVkDamq/udk7UInLohbhuN/7NsNLHfPIqt526eP4L2dC31G3Lr3RW+GJrOa4K+EjK4i2ZZTk4LUqu7
QRXgzVDW+dyNILPuC5CyqrXLrYRcHk40bf6En7P6owRdtscMPwMAAP//m3s0c1gDAAA=
`,
	},

	"/templates/root.tgo": {
		name:    "root.tgo",
		local:   "templates/root.tgo",
		size:    510,
		modtime: 1568783834,
		compressed: `
H4sIAAAAAAAC/4SPzY6bMBSF936KI5TFzKL2fqpZNamK1PxIoQ9gzA22AjayL2kjxLtXhqQ/q9ldzv24
57NS+BIaQkueomZqUN9hmYf0plTr2I61NKFXV907Y10zqjaQ/4ztEYdjhd22rFB9K8/4Wn7fSaEUfiRC
uICtS0hhjIZgcoNLaMONol87NPZlhc4Z8onAVjOM9qgJlzD6Bs7nY2wJF9cRumAWu+A/tkOkISTHId6l
EIM2V90SpgkbeVo/DronzLMQrh9CZLwIAJmI2reEzSN+e8dGlsuc8Gmen9RjLx9nUPyTnTRbzHPxZMk3
y6+vQtx0RE+sz8ZSr/GOLCsP9HP/J3x5FeKvBuu6o9WiymPKztMEpn7oNBOKhZDchuJJr0Ruze/7DzbB
M/3iFZd5/zsAAP//K5RKj/4BAAA=
`,
	},

	"/templates/table.tgo": {
		name:    "table.tgo",
		local:   "templates/table.tgo",
		size:    15699,
		modtime: 1568788701,
		compressed: `
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
EHWW31M9AAA=
`,
	},

	"/templates": {
		name:  "templates",
		local: `templates/`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"templates/": {
		_escData["/templates/context.tgo"],
		_escData["/templates/root.tgo"],
		_escData["/templates/table.tgo"],
	},
}

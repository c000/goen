// Code generated by "esc -o bindata.go -pkg generator -private templates/"; DO NOT EDIT.

package generator

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/templates/context.tgo": {
		local:   "templates/context.tgo",
		size:    532,
		modtime: 1530498695,
		compressed: `
H4sIAAAAAAAC/5yQwW7CMBBE7/mKEaIViWg+IBKXNL1yKT8Q20sUKV2ovRFFUf692gCmRGoP9ckezz7t
jJyPhKp8PbDQlyCI761gSAAgaw7EefxMJnEY4GtuCEupTUcoNljmO70GjOPNsnQmkOwUXmxw9C3LHoun
UJXvJIvrbP7G0sr559hMR/bIujuJnb7GJNn3bLGlU9xz5dq6Iyvb+oM0UMvNGs4gC59dXpUpsnveS1Bn
rK45xf2NpIh0cnuS3jOeo+0C0ROlQpnrqP9V2ss11H+am8/O6ivAdJo3uHLGpg+raZc3klb6HQAA//9D
kKRFFAIAAA==
`,
	},

	"/templates/root.tgo": {
		local:   "templates/root.tgo",
		size:    510,
		modtime: 1530498695,
		compressed: `
H4sIAAAAAAAC/4SPzY6bMBSF936KI5TFzKL2fqpZNamK1PxIoQ9gzA22AjayL2kjxLtXhqQ/q9ldzv24
57NS+BIaQkueomZqUN9hmYf0plTr2I61NKFXV907Y10zqjaQ/4ztEYdjhd22rFB9K8/4Wn7fSaEUfiRC
uICtS0hhjIZgcoNLaMONol87NPZlhc4Z8onAVjOM9qgJlzD6Bs7nY2wJF9cRumAWu+A/tkOkISTHId6l
EIM2V90SpgkbeVo/DronzLMQrh9CZLwIAJmI2reEzSN+e8dGlsuc8Gmen9RjLx9nUPyTnTRbzHPxZMk3
y6+vQtx0RE+sz8ZSr/EOTz9fsrDc/0lfhfirwbruaLWo8piy8zSBqR86zYRiISS3oXjSK5Fb8/v+g03w
TL94xWXe/w4AAP//BUC9z/4BAAA=
`,
	},

	"/templates/table.tgo": {
		local:   "templates/table.tgo",
		size:    12809,
		modtime: 1530502750,
		compressed: `
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
DQAA//8xUdxPCTIAAA==
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/templates": {
		isDir: true,
		local: "templates",
	},
}

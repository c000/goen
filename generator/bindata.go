// Code generated by "esc -o bindata.go -pkg generator -private templates/"; DO NOT EDIT.

package generator

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/templates/context.tgo": {
		local:   "templates/context.tgo",
		size:    856,
		modtime: 1532581055,
		compressed: `
H4sIAAAAAAAC/8ySQW6zMBSE95xiFOX/BSjlAEjZULrNpvQA2H5BSNSk+KEQIe5e2QRIUBupXZUVfp43
mvlkvpwIafJca6aOYbhpJaP3ACAsatLRfOm5Yd+jyXVB2HIuKkK8xzbK7K/BMEySrRKGOLPm8R6nptR8
xOafSZNX4s11N3rRXPLldm01R3jvtShJK3saPO/YaokDneecvirziiQf8neyhUpd7KAEQvNRRWkSIFz6
jkWVkDamq/udk7UInLohbhuN/7NsNLHfPIqt526eP4L2dC31G3Lr3RW+GJrOa4K+EjK4i2ZZTk4LUqu7
QRXgzVDW+dyNILPuC5CyqrXLrYRcHk40bf6En7P6owRdtscMPwMAAP//m3s0c1gDAAA=
`,
	},

	"/templates/root.tgo": {
		local:   "templates/root.tgo",
		size:    510,
		modtime: 1548131031,
		compressed: `
H4sIAAAAAAAC/4SPzY6bMBSF936KI5TFzKL2fqpZNamK1PxIoQ9gzA22AjayL2kjxLtXhqQ/q9ldzv24
57NS+BIaQkueomZqUN9hmYf0plTr2I61NKFXV907Y10zqjaQ/4ztEYdjhd22rFB9K8/4Wn7fSaEUfiRC
uICtS0hhjIZgcoNLaMONol87NPZlhc4Z8onAVjOM9qgJlzD6Bs7nY2wJF9cRumAWu+A/tkOkISTHId6l
EIM2V90SpgkbeVo/DronzLMQrh9CZLwIAJmI2reEzSN+e8dGlsuc8Gmen9RjLx9nUPyTnTRbzHPxZMk3
y6+vQtx0RE+sz8ZSr/GOLCsP9HP/J3x5FeKvBuu6o9WiymPKztMEpn7oNBOKhZDchuJJr0Ruze/7DzbB
M/3iFZd5/zsAAP//K5RKj/4BAAA=
`,
	},

	"/templates/table.tgo": {
		local:   "templates/table.tgo",
		size:    15235,
		modtime: 1548139857,
		compressed: `
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
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/templates": {
		isDir: true,
		local: "templates",
	},
}

// Code generated by "esc -o bindata.go -pkg generator -private templates/"; DO NOT EDIT.

package generator

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/templates/context.tgo": {
		local:   "templates/context.tgo",
		size:    856,
		modtime: 1532581055,
		compressed: `
H4sIAAAAAAAC/8ySQW6zMBSE95xiFOX/BSjlAEjZULrNpvQA2H5BSNSk+KEQIe5e2QRIUBupXZUVfp43
mvlkvpwIafJca6aOYbhpJaP3ACAsatLRfOm5Yd+jyXVB2HIuKkK8xzbK7K/BMEySrRKGOLPm8R6nptR8
xOafSZNX4s11N3rRXPLldm01R3jvtShJK3saPO/YaokDneecvirziiQf8neyhUpd7KAEQvNRRWkSIFz6
jkWVkDamq/udk7UInLohbhuN/7NsNLHfPIqt526eP4L2dC31G3Lr3RW+GJrOa4K+EjK4i2ZZTk4LUqu7
QRXgzVDW+dyNILPuC5CyqrXLrYRcHk40bf6En7P6owRdtscMPwMAAP//m3s0c1gDAAA=
`,
	},

	"/templates/root.tgo": {
		local:   "templates/root.tgo",
		size:    510,
		modtime: 1530498695,
		compressed: `
H4sIAAAAAAAC/4SPzY6bMBSF936KI5TFzKL2fqpZNamK1PxIoQ9gzA22AjayL2kjxLtXhqQ/q9ldzv24
57NS+BIaQkueomZqUN9hmYf0plTr2I61NKFXV907Y10zqjaQ/4ztEYdjhd22rFB9K8/4Wn7fSaEUfiRC
uICtS0hhjIZgcoNLaMONol87NPZlhc4Z8onAVjOM9qgJlzD6Bs7nY2wJF9cRumAWu+A/tkOkISTHId6l
EIM2V90SpgkbeVo/DronzLMQrh9CZLwIAJmI2reEzSN+e8dGlsuc8Gmen9RjLx9nUPyTnTRbzHPxZMk3
y6+vQtx0RE+sz8ZSr/EOTz9fsrDc/0lfhfirwbruaLWo8piy8zSBqR86zYRiISS3oXjSK5Fb8/v+g03w
TL94xWXe/w4AAP//BUC9z/4BAAA=
`,
	},

	"/templates/table.tgo": {
		local:   "templates/table.tgo",
		size:    12831,
		modtime: 1532085511,
		compressed: `
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
CvkfMgAA
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/templates": {
		isDir: true,
		local: "templates",
	},
}

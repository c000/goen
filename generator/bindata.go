// Code generated by "esc -o bindata.go -pkg generator -private templates/"; DO NOT EDIT.

package generator

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/templates/context.tgo": {
		local:   "templates/context.tgo",
		size:    856,
		modtime: 1532581055,
		compressed: `
H4sIAAAAAAAC/8ySQW6zMBSE95xiFOX/BSjlAEjZULrNpvQA2H5BSNSk+KEQIe5e2QRIUBupXZUVfp43
mvlkvpwIafJca6aOYbhpJaP3ACAsatLRfOm5Yd+jyXVB2HIuKkK8xzbK7K/BMEySrRKGOLPm8R6nptR8
xOafSZNX4s11N3rRXPLldm01R3jvtShJK3saPO/YaokDneecvirziiQf8neyhUpd7KAEQvNRRWkSIFz6
jkWVkDamq/udk7UInLohbhuN/7NsNLHfPIqt526eP4L2dC31G3Lr3RW+GJrOa4K+EjK4i2ZZTk4LUqu7
QRXgzVDW+dyNILPuC5CyqrXLrYRcHk40bf6En7P6owRdtscMPwMAAP//m3s0c1gDAAA=
`,
	},

	"/templates/root.tgo": {
		local:   "templates/root.tgo",
		size:    510,
		modtime: 1530498695,
		compressed: `
H4sIAAAAAAAC/4SPzY6bMBSF936KI5TFzKL2fqpZNamK1PxIoQ9gzA22AjayL2kjxLtXhqQ/q9ldzv24
57NS+BIaQkueomZqUN9hmYf0plTr2I61NKFXV907Y10zqjaQ/4ztEYdjhd22rFB9K8/4Wn7fSaEUfiRC
uICtS0hhjIZgcoNLaMONol87NPZlhc4Z8onAVjOM9qgJlzD6Bs7nY2wJF9cRumAWu+A/tkOkISTHId6l
EIM2V90SpgkbeVo/DronzLMQrh9CZLwIAJmI2reEzSN+e8dGlsuc8Gmen9RjLx9nUPyTnTRbzHPxZMk3
y6+vQtx0RE+sz8ZSr/EOTz9fsrDc/0lfhfirwbruaLWo8piy8zSBqR86zYRiISS3oXjSK5Fb8/v+g03w
TL94xWXe/w4AAP//BUC9z/4BAAA=
`,
	},

	"/templates/table.tgo": {
		local:   "templates/table.tgo",
		size:    14212,
		modtime: 1536570922,
		compressed: `
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
AS0tZYvs/wUAAP//g4nqYoQ3AAA=
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/templates": {
		isDir: true,
		local: "templates",
	},
}

// Code generated by "esc -o bindata.go -pkg generator -private templates/"; DO NOT EDIT.

package generator

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/templates/context.tgo": {
		local:   "templates/context.tgo",
		size:    856,
		modtime: 1532581055,
		compressed: `
H4sIAAAAAAAC/8ySQW6zMBSE95xiFOX/BSjlAEjZULrNpvQA2H5BSNSk+KEQIe5e2QRIUBupXZUVfp43
mvlkvpwIafJca6aOYbhpJaP3ACAsatLRfOm5Yd+jyXVB2HIuKkK8xzbK7K/BMEySrRKGOLPm8R6nptR8
xOafSZNX4s11N3rRXPLldm01R3jvtShJK3saPO/YaokDneecvirziiQf8neyhUpd7KAEQvNRRWkSIFz6
jkWVkDamq/udk7UInLohbhuN/7NsNLHfPIqt526eP4L2dC31G3Lr3RW+GJrOa4K+EjK4i2ZZTk4LUqu7
QRXgzVDW+dyNILPuC5CyqrXLrYRcHk40bf6En7P6owRdtscMPwMAAP//m3s0c1gDAAA=
`,
	},

	"/templates/root.tgo": {
		local:   "templates/root.tgo",
		size:    510,
		modtime: 1548144244,
		compressed: `
H4sIAAAAAAAC/4SPzY6bMBSF936KI5TFzKL2fqpZNamK1PxIoQ9gzA22AjayL2kjxLtXhqQ/q9ldzv24
57NS+BIaQkueomZqUN9hmYf0plTr2I61NKFXV907Y10zqjaQ/4ztEYdjhd22rFB9K8/4Wn7fSaEUfiRC
uICtS0hhjIZgcoNLaMONol87NPZlhc4Z8onAVjOM9qgJlzD6Bs7nY2wJF9cRumAWu+A/tkOkISTHId6l
EIM2V90SpgkbeVo/DronzLMQrh9CZLwIAJmI2reEzSN+e8dGlsuc8Gmen9RjLx9nUPyTnTRbzHPxZMk3
y6+vQtx0RE+sz8ZSr/GOLCsP9HP/J3x5FeKvBuu6o9WiymPKztMEpn7oNBOKhZDchuJJr0Ruze/7DzbB
M/3iFZd5/zsAAP//K5RKj/4BAAA=
`,
	},

	"/templates/table.tgo": {
		local:   "templates/table.tgo",
		size:    15641,
		modtime: 1548824579,
		compressed: `
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
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/templates": {
		isDir: true,
		local: "templates",
	},
}

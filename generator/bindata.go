// Code generated by "esc -o bindata.go -pkg generator -private templates/"; DO NOT EDIT.

package generator

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/templates/context.tgo": {
		local:   "templates/context.tgo",
		size:    532,
		modtime: 1529725180,
		compressed: `
H4sIAAAAAAAC/5yQwW7CMBBE7/mKEaIViWg+IBKXNL1yKT8Q20sUKV2ovRFFUf692gCmRGoP9ckezz7t
jJyPhKp8PbDQlyCI761gSAAgaw7EefxMJnEY4GtuCEupTUcoNljmO70GjOPNsnQmkOwUXmxw9C3LHoun
UJXvJIvrbP7G0sr559hMR/bIujuJnb7GJNn3bLGlU9xz5dq6Iyvb+oM0UMvNGs4gC59dXpUpsnveS1Bn
rK45xf2NpIh0cnuS3jOeo+0C0ROlQpnrqP9V2ss11H+am8/O6ivAdJo3uHLGpg+raZc3klb6HQAA//9D
kKRFFAIAAA==
`,
	},

	"/templates/root.tgo": {
		local:   "templates/root.tgo",
		size:    510,
		modtime: 1529399922,
		compressed: `
H4sIAAAAAAAC/4SPzY6bMBSF936KI5TFzKL2fqpZNamK1PxIoQ9gzA22AjayL2kjxLtXhqQ/q9ldzv24
57NS+BIaQkueomZqUN9hmYf0plTr2I61NKFXV907Y10zqjaQ/4ztEYdjhd22rFB9K8/4Wn7fSaEUfiRC
uICtS0hhjIZgcoNLaMONol87NPZlhc4Z8onAVjOM9qgJlzD6Bs7nY2wJF9cRumAWu+A/tkOkISTHId6l
EIM2V90SpgkbeVo/DronzLMQrh9CZLwIAJmI2reEzSN+e8dGlsuc8Gmen9RjLx9nUPyTnTRbzHPxZMk3
y6+vQtx0RE+sz8ZSr/EOTz9fsrDc/0lfhfirwbruaLWo8piy8zSBqR86zYRiISS3oXjSK5Fb8/v+g03w
TL94xWXe/w4AAP//BUC9z/4BAAA=
`,
	},

	"/templates/table.tgo": {
		local:   "templates/table.tgo",
		size:    13037,
		modtime: 1529725166,
		compressed: `
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
PZHtMgAA
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/templates": {
		isDir: true,
		local: "templates",
	},
}

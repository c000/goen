// Code generated by "esc -o bindata.go -pkg generator -private templates/"; DO NOT EDIT.

package generator

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/templates/context.tgo": {
		local:   "templates/context.tgo",
		size:    856,
		modtime: 1532581055,
		compressed: `
H4sIAAAAAAAC/8ySQW6zMBSE95xiFOX/BSjlAEjZULrNpvQA2H5BSNSk+KEQIe5e2QRIUBupXZUVfp43
mvlkvpwIafJca6aOYbhpJaP3ACAsatLRfOm5Yd+jyXVB2HIuKkK8xzbK7K/BMEySrRKGOLPm8R6nptR8
xOafSZNX4s11N3rRXPLldm01R3jvtShJK3saPO/YaokDneecvirziiQf8neyhUpd7KAEQvNRRWkSIFz6
jkWVkDamq/udk7UInLohbhuN/7NsNLHfPIqt526eP4L2dC31G3Lr3RW+GJrOa4K+EjK4i2ZZTk4LUqu7
QRXgzVDW+dyNILPuC5CyqrXLrYRcHk40bf6En7P6owRdtscMPwMAAP//m3s0c1gDAAA=
`,
	},

	"/templates/root.tgo": {
		local:   "templates/root.tgo",
		size:    510,
		modtime: 1530498695,
		compressed: `
H4sIAAAAAAAC/4SPzY6bMBSF936KI5TFzKL2fqpZNamK1PxIoQ9gzA22AjayL2kjxLtXhqQ/q9ldzv24
57NS+BIaQkueomZqUN9hmYf0plTr2I61NKFXV907Y10zqjaQ/4ztEYdjhd22rFB9K8/4Wn7fSaEUfiRC
uICtS0hhjIZgcoNLaMONol87NPZlhc4Z8onAVjOM9qgJlzD6Bs7nY2wJF9cRumAWu+A/tkOkISTHId6l
EIM2V90SpgkbeVo/DronzLMQrh9CZLwIAJmI2reEzSN+e8dGlsuc8Gmen9RjLx9nUPyTnTRbzHPxZMk3
y6+vQtx0RE+sz8ZSr/EOTz9fsrDc/0lfhfirwbruaLWo8piy8zSBqR86zYRiISS3oXjSK5Fb8/v+g03w
TL94xWXe/w4AAP//BUC9z/4BAAA=
`,
	},

	"/templates/table.tgo": {
		local:   "templates/table.tgo",
		size:    13667,
		modtime: 1533006000,
		compressed: `
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
/6pyfHZjNQAA
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/templates": {
		isDir: true,
		local: "templates",
	},
}

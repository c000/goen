// Code generated by "esc -o bindata.go -pkg generator -private templates/"; DO NOT EDIT.

package generator

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/templates/context.tgo": {
		local:   "templates/context.tgo",
		size:    532,
		modtime: 1529737446,
		compressed: `
H4sIAAAAAAAC/5yQwW7CMBBE7/mKEaIViWg+IBKXNL1yKT8Q20sUKV2ovRFFUf692gCmRGoP9ckezz7t
jJyPhKp8PbDQlyCI761gSAAgaw7EefxMJnEY4GtuCEupTUcoNljmO70GjOPNsnQmkOwUXmxw9C3LHoun
UJXvJIvrbP7G0sr559hMR/bIujuJnb7GJNn3bLGlU9xz5dq6Iyvb+oM0UMvNGs4gC59dXpUpsnveS1Bn
rK45xf2NpIh0cnuS3jOeo+0C0ROlQpnrqP9V2ss11H+am8/O6ivAdJo3uHLGpg+raZc3klb6HQAA//9D
kKRFFAIAAA==
`,
	},

	"/templates/root.tgo": {
		local:   "templates/root.tgo",
		size:    510,
		modtime: 1529737446,
		compressed: `
H4sIAAAAAAAC/4SPzY6bMBSF936KI5TFzKL2fqpZNamK1PxIoQ9gzA22AjayL2kjxLtXhqQ/q9ldzv24
57NS+BIaQkueomZqUN9hmYf0plTr2I61NKFXV907Y10zqjaQ/4ztEYdjhd22rFB9K8/4Wn7fSaEUfiRC
uICtS0hhjIZgcoNLaMONol87NPZlhc4Z8onAVjOM9qgJlzD6Bs7nY2wJF9cRumAWu+A/tkOkISTHId6l
EIM2V90SpgkbeVo/DronzLMQrh9CZLwIAJmI2reEzSN+e8dGlsuc8Gmen9RjLx9nUPyTnTRbzHPxZMk3
y6+vQtx0RE+sz8ZSr/EOTz9fsrDc/0lfhfirwbruaLWo8piy8zSBqR86zYRiISS3oXjSK5Fb8/v+g03w
TL94xWXe/w4AAP//BUC9z/4BAAA=
`,
	},

	"/templates/table.tgo": {
		local:   "templates/table.tgo",
		size:    12864,
		modtime: 1530274964,
		compressed: `
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
k+mvXtM5eXfaPX1bD+3/BwAA//9HAX1uQDIAAA==
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/templates": {
		isDir: true,
		local: "templates",
	},
}

// Code generated by "esc -o bindata.go -pkg generator -private templates/"; DO NOT EDIT.

package generator

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/templates/context.tgo": {
		local:   "templates/context.tgo",
		size:    532,
		modtime: 1530498695,
		compressed: `
H4sIAAAAAAAC/5yQwW7CMBBE7/mKEaIViWg+IBKXNL1yKT8Q20sUKV2ovRFFUf692gCmRGoP9ckezz7t
jJyPhKp8PbDQlyCI761gSAAgaw7EefxMJnEY4GtuCEupTUcoNljmO70GjOPNsnQmkOwUXmxw9C3LHoun
UJXvJIvrbP7G0sr559hMR/bIujuJnb7GJNn3bLGlU9xz5dq6Iyvb+oM0UMvNGs4gC59dXpUpsnveS1Bn
rK45xf2NpIh0cnuS3jOeo+0C0ROlQpnrqP9V2ss11H+am8/O6ivAdJo3uHLGpg+raZc3klb6HQAA//9D
kKRFFAIAAA==
`,
	},

	"/templates/root.tgo": {
		local:   "templates/root.tgo",
		size:    510,
		modtime: 1530498695,
		compressed: `
H4sIAAAAAAAC/4SPzY6bMBSF936KI5TFzKL2fqpZNamK1PxIoQ9gzA22AjayL2kjxLtXhqQ/q9ldzv24
57NS+BIaQkueomZqUN9hmYf0plTr2I61NKFXV907Y10zqjaQ/4ztEYdjhd22rFB9K8/4Wn7fSaEUfiRC
uICtS0hhjIZgcoNLaMONol87NPZlhc4Z8onAVjOM9qgJlzD6Bs7nY2wJF9cRumAWu+A/tkOkISTHId6l
EIM2V90SpgkbeVo/DronzLMQrh9CZLwIAJmI2reEzSN+e8dGlsuc8Gmen9RjLx9nUPyTnTRbzHPxZMk3
y6+vQtx0RE+sz8ZSr/EOTz9fsrDc/0lfhfirwbruaLWo8piy8zSBqR86zYRiISS3oXjSK5Fb8/v+g03w
TL94xWXe/w4AAP//BUC9z/4BAAA=
`,
	},

	"/templates/table.tgo": {
		local:   "templates/table.tgo",
		size:    12587,
		modtime: 1530500729,
		compressed: `
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
MQAA
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/templates": {
		isDir: true,
		local: "templates",
	},
}

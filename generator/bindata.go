// Code generated by "esc -o bindata.go -pkg generator -private templates/"; DO NOT EDIT.

package generator

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/templates/context.tgo": {
		local:   "templates/context.tgo",
		size:    532,
		modtime: 1529737446,
		compressed: `
H4sIAAAAAAAC/5yQwW7CMBBE7/mKEaIViWg+IBKXNL1yKT8Q20sUKV2ovRFFUf692gCmRGoP9ckezz7t
jJyPhKp8PbDQlyCI761gSAAgaw7EefxMJnEY4GtuCEupTUcoNljmO70GjOPNsnQmkOwUXmxw9C3LHoun
UJXvJIvrbP7G0sr559hMR/bIujuJnb7GJNn3bLGlU9xz5dq6Iyvb+oM0UMvNGs4gC59dXpUpsnveS1Bn
rK45xf2NpIh0cnuS3jOeo+0C0ROlQpnrqP9V2ss11H+am8/O6ivAdJo3uHLGpg+raZc3klb6HQAA//9D
kKRFFAIAAA==
`,
	},

	"/templates/root.tgo": {
		local:   "templates/root.tgo",
		size:    510,
		modtime: 1529737446,
		compressed: `
H4sIAAAAAAAC/4SPzY6bMBSF936KI5TFzKL2fqpZNamK1PxIoQ9gzA22AjayL2kjxLtXhqQ/q9ldzv24
57NS+BIaQkueomZqUN9hmYf0plTr2I61NKFXV907Y10zqjaQ/4ztEYdjhd22rFB9K8/4Wn7fSaEUfiRC
uICtS0hhjIZgcoNLaMONol87NPZlhc4Z8onAVjOM9qgJlzD6Bs7nY2wJF9cRumAWu+A/tkOkISTHId6l
EIM2V90SpgkbeVo/DronzLMQrh9CZLwIAJmI2reEzSN+e8dGlsuc8Gmen9RjLx9nUPyTnTRbzHPxZMk3
y6+vQtx0RE+sz8ZSr/EOTz9fsrDc/0lfhfirwbruaLWo8piy8zSBqR86zYRiISS3oXjSK5Fb8/v+g03w
TL94xWXe/w4AAP//BUC9z/4BAAA=
`,
	},

	"/templates/table.tgo": {
		local:   "templates/table.tgo",
		size:    12539,
		modtime: 1530274609,
		compressed: `
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
tHv6th7a/w8AAP//2jUdafswAAA=
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/templates": {
		isDir: true,
		local: "templates",
	},
}

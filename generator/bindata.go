// Code generated by "esc -o bindata.go -pkg generator -private templates/"; DO NOT EDIT.

package generator

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/templates/context.tgo": {
		local:   "templates/context.tgo",
		size:    532,
		modtime: 1529737446,
		compressed: `
H4sIAAAAAAAC/5yQwW7CMBBE7/mKEaIViWg+IBKXNL1yKT8Q20sUKV2ovRFFUf692gCmRGoP9ckezz7t
jJyPhKp8PbDQlyCI761gSAAgaw7EefxMJnEY4GtuCEupTUcoNljmO70GjOPNsnQmkOwUXmxw9C3LHoun
UJXvJIvrbP7G0sr559hMR/bIujuJnb7GJNn3bLGlU9xz5dq6Iyvb+oM0UMvNGs4gC59dXpUpsnveS1Bn
rK45xf2NpIh0cnuS3jOeo+0C0ROlQpnrqP9V2ss11H+am8/O6ivAdJo3uHLGpg+raZc3klb6HQAA//9D
kKRFFAIAAA==
`,
	},

	"/templates/root.tgo": {
		local:   "templates/root.tgo",
		size:    510,
		modtime: 1529737446,
		compressed: `
H4sIAAAAAAAC/4SPzY6bMBSF936KI5TFzKL2fqpZNamK1PxIoQ9gzA22AjayL2kjxLtXhqQ/q9ldzv24
57NS+BIaQkueomZqUN9hmYf0plTr2I61NKFXV907Y10zqjaQ/4ztEYdjhd22rFB9K8/4Wn7fSaEUfiRC
uICtS0hhjIZgcoNLaMONol87NPZlhc4Z8onAVjOM9qgJlzD6Bs7nY2wJF9cRumAWu+A/tkOkISTHId6l
EIM2V90SpgkbeVo/DronzLMQrh9CZLwIAJmI2reEzSN+e8dGlsuc8Gmen9RjLx9nUPyTnTRbzHPxZMk3
y6+vQtx0RE+sz8ZSr/EOTz9fsrDc/0lfhfirwbruaLWo8piy8zSBqR86zYRiISS3oXjSK5Fb8/v+g03w
TL94xWXe/w4AAP//BUC9z/4BAAA=
`,
	},

	"/templates/table.tgo": {
		local:   "templates/table.tgo",
		size:    11269,
		modtime: 1530010645,
		compressed: `
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
Tqa/ek7nFFy8D/RtA7L/FwAA//9Vm1xMBSwAAA==
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/templates": {
		isDir: true,
		local: "templates",
	},
}
